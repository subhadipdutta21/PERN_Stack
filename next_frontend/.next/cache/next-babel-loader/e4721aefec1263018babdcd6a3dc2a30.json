{"ast":null,"code":"var _jsxFileName = \"D:\\\\PERSONAL PROJECTS\\\\REACT\\\\PERN\\\\next_frontend\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport { message } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { client } from '../apolloGqlClient';\nimport PostCard from '../Components/PostCard';\nimport { fetch_posts_query } from '../gqlQueries';\n\nconst Home = ({\n  posts\n}) => {\n  console.log(posts);\n  return posts.map((itm, idx) => __jsx(PostCard, {\n    key: itm.id,\n    content: itm.body,\n    name: itm.name,\n    postID: itm.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 29\n    }\n  }));\n};\n\nexport async function getStaticProps() {\n  console.log('clled server side');\n  let posts = [];\n\n  try {\n    var _resp$data, _resp$data2;\n\n    const resp = await client.query({\n      query: fetch_posts_query,\n      fetchPolicy: 'no-cache',\n      variables: {\n        input: null\n      }\n    });\n    console.log(resp);\n    (resp === null || resp === void 0 ? void 0 : (_resp$data = resp.data) === null || _resp$data === void 0 ? void 0 : _resp$data.fetchPosts) ? posts = resp === null || resp === void 0 ? void 0 : (_resp$data2 = resp.data) === null || _resp$data2 === void 0 ? void 0 : _resp$data2.fetchPosts : null;\n  } catch (error) {\n    console.log(error);\n    message.error('Could not fetch posts');\n  }\n\n  return {\n    props: {\n      posts\n    }\n  };\n}\nexport default Home;","map":{"version":3,"sources":["D:/PERSONAL PROJECTS/REACT/PERN/next_frontend/pages/index.js"],"names":["message","React","useEffect","useState","client","PostCard","fetch_posts_query","Home","posts","console","log","map","itm","idx","id","body","name","getStaticProps","resp","query","fetchPolicy","variables","input","data","fetchPosts","error","props"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,MAAxB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,iBAAT,QAAkC,eAAlC;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAC1BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAEA,SACEA,KAAK,CAACG,GAAN,CAAU,CAACC,GAAD,EAAMC,GAAN,KAAc,MAAC,QAAD;AAAU,IAAA,GAAG,EAAED,GAAG,CAACE,EAAnB;AAAuB,IAAA,OAAO,EAAEF,GAAG,CAACG,IAApC;AAA0C,IAAA,IAAI,EAAEH,GAAG,CAACI,IAApD;AAA0D,IAAA,MAAM,EAAEJ,GAAG,CAACE,EAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAxB,CADF;AAGD,CAND;;AAQA,OAAO,eAAeG,cAAf,GAAgC;AAErCR,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,MAAIF,KAAK,GAAG,EAAZ;;AACA,MAAI;AAAA;;AACF,UAAMU,IAAI,GAAG,MAAMd,MAAM,CAACe,KAAP,CAAa;AAC9BA,MAAAA,KAAK,EAAEb,iBADuB;AACJc,MAAAA,WAAW,EAAE,UADT;AACqBC,MAAAA,SAAS,EAAE;AAC5DC,QAAAA,KAAK,EAAE;AADqD;AADhC,KAAb,CAAnB;AAKAb,IAAAA,OAAO,CAACC,GAAR,CAAYQ,IAAZ;AACA,KAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,0BAAAA,IAAI,CAAEK,IAAN,0DAAYC,UAAZ,IAAyBhB,KAAK,GAAGU,IAAH,aAAGA,IAAH,sCAAGA,IAAI,CAAEK,IAAT,gDAAG,YAAYC,UAA7C,GAA0D,IAA1D;AAED,GATD,CASE,OAAOC,KAAP,EAAc;AAAEhB,IAAAA,OAAO,CAACC,GAAR,CAAYe,KAAZ;AAAoBzB,IAAAA,OAAO,CAACyB,KAAR,CAAc,uBAAd;AAAwC;;AAE9E,SAAO;AACLC,IAAAA,KAAK,EAAE;AACLlB,MAAAA;AADK;AADF,GAAP;AAKD;AAED,eAAeD,IAAf","sourcesContent":["import { message } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { client } from '../apolloGqlClient';\nimport PostCard from '../Components/PostCard';\nimport { fetch_posts_query } from '../gqlQueries';\n\nconst Home = ({ posts }) => {\n  console.log(posts)\n\n  return (\n    posts.map((itm, idx) => <PostCard key={itm.id} content={itm.body} name={itm.name} postID={itm.id} />)\n  );\n}\n\nexport async function getStaticProps() {\n\n  console.log('clled server side')\n  let posts = []\n  try {\n    const resp = await client.query({\n      query: fetch_posts_query, fetchPolicy: 'no-cache', variables: {\n        input: null\n      }\n    })\n    console.log(resp)\n    resp?.data?.fetchPosts ? posts = resp?.data?.fetchPosts : null\n\n  } catch (error) { console.log(error); message.error('Could not fetch posts') }\n\n  return {\n    props: {\n      posts\n    },\n  }\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}