{"ast":null,"code":"var _jsxFileName = \"D:\\\\PERSONAL PROJECTS\\\\REACT\\\\PERN\\\\next_frontend\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport { message } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { client } from '../apolloGqlClient';\nimport PostCard from '../Components/PostCard';\nimport { fetch_posts_query } from '../gqlQueries';\n\nconst Home = () => {\n  const {\n    0: posts,\n    1: setPosts\n  } = useState([]);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  useEffect(() => {\n    fetchPosts(); // return () => fetchPosts()\n  }, []);\n\n  const fetchPosts = async () => {\n    try {\n      var _resp$data, _resp$data2;\n\n      const resp = await client.query({\n        query: fetch_posts_query,\n        fetchPolicy: 'no-cache',\n        variables: {\n          input: null\n        }\n      });\n      console.log(resp);\n      (resp === null || resp === void 0 ? void 0 : (_resp$data = resp.data) === null || _resp$data === void 0 ? void 0 : _resp$data.fetchPosts) ? setPosts(resp === null || resp === void 0 ? void 0 : (_resp$data2 = resp.data) === null || _resp$data2 === void 0 ? void 0 : _resp$data2.fetchPosts) : message.error('something went wrong!');\n    } catch (error) {\n      console.log(error);\n      message.error('Could not fetch posts');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return __jsx(React.Fragment, null, posts.map((itm, idx) => __jsx(React.Fragment, null, __jsx(PostCard, {\n    key: itm.id,\n    content: itm.body,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }))));\n};\n\nexport default Home;","map":{"version":3,"sources":["D:/PERSONAL PROJECTS/REACT/PERN/next_frontend/pages/index.js"],"names":["message","React","useEffect","useState","client","PostCard","fetch_posts_query","Home","posts","setPosts","loading","setLoading","fetchPosts","resp","query","fetchPolicy","variables","input","console","log","data","error","map","itm","idx","id","body"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,MAAxB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,iBAAT,QAAkC,eAAlC;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAEjB,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAACO,OAAD;AAAA,OAAUC;AAAV,MAAwBR,QAAQ,CAAC,IAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,UAAU,GADI,CAGd;AACD,GAJQ,EAIN,EAJM,CAAT;;AAMA,QAAMA,UAAU,GAAG,YAAY;AAC7B,QAAI;AAAA;;AACF,YAAMC,IAAI,GAAG,MAAMT,MAAM,CAACU,KAAP,CAAa;AAC9BA,QAAAA,KAAK,EAAER,iBADuB;AACJS,QAAAA,WAAW,EAAE,UADT;AACqBC,QAAAA,SAAS,EAAE;AAC5DC,UAAAA,KAAK,EAAE;AADqD;AADhC,OAAb,CAAnB;AAKAC,MAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACA,OAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,0BAAAA,IAAI,CAAEO,IAAN,0DAAYR,UAAZ,IAAyBH,QAAQ,CAACI,IAAD,aAACA,IAAD,sCAACA,IAAI,CAAEO,IAAP,gDAAC,YAAYR,UAAb,CAAjC,GAA4DZ,OAAO,CAACqB,KAAR,CAAc,uBAAd,CAA5D;AAED,KATD,CASE,OAAOA,KAAP,EAAc;AAAEH,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AAAoBrB,MAAAA,OAAO,CAACqB,KAAR,CAAc,uBAAd;AAAwC,KAT9E,SAUQ;AAAEV,MAAAA,UAAU,CAAC,KAAD,CAAV;AAAmB;AAE9B,GAbD;;AAeA,SACE,4BAEIH,KAAK,CAACc,GAAN,CAAU,CAACC,GAAD,EAAMC,GAAN,KACR,4BACE,MAAC,QAAD;AAAU,IAAA,GAAG,EAAED,GAAG,CAACE,EAAnB;AAAuB,IAAA,OAAO,EAAEF,GAAG,CAACG,IAApC;AAA0C,IAAA,OAAO,EAAEhB,OAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CAFJ,CADF;AAWD,CArCD;;AAuCA,eAAeH,IAAf","sourcesContent":["import { message } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { client } from '../apolloGqlClient';\nimport PostCard from '../Components/PostCard';\nimport { fetch_posts_query } from '../gqlQueries';\n\nconst Home = () => {\n\n  const [posts, setPosts] = useState([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    fetchPosts()\n\n    // return () => fetchPosts()\n  }, [])\n\n  const fetchPosts = async () => {\n    try {\n      const resp = await client.query({\n        query: fetch_posts_query, fetchPolicy: 'no-cache', variables: {\n          input: null\n        }\n      })\n      console.log(resp)\n      resp?.data?.fetchPosts ? setPosts(resp?.data?.fetchPosts) : message.error('something went wrong!')\n\n    } catch (error) { console.log(error); message.error('Could not fetch posts') }\n    finally { setLoading(false) }\n\n  }\n\n  return (\n    <>\n      {\n        posts.map((itm, idx) => (\n          <>\n            <PostCard key={itm.id} content={itm.body} loading={loading} />\n          </>\n        ))\n      }\n    </>\n  );\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}