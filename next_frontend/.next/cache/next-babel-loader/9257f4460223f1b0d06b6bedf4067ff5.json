{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\PERSONAL PROJECTS\\\\REACT\\\\PERN\\\\next_frontend\\\\pages\\\\index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { client } from '../apolloGqlClient';\nimport PostCard from '../Components/PostCard';\nimport { fetch_posts_query } from '../gqlQueries';\n\nvar Home = function Home() {\n  _s();\n\n  useEffect(function () {\n    fetchPosts();\n    return function () {\n      return fetchPosts();\n    };\n  }, []);\n\n  var fetchPosts = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var resp;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return client.query({\n                query: fetch_posts_query,\n                fetchPolicy: 'no-cache',\n                variables: {\n                  input: null\n                }\n              });\n\n            case 3:\n              resp = _context.sent;\n              console.log(resp);\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    return function fetchPosts() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(React.Fragment, null, [1, 2, 3, 4, 5, 6, 7, 7, 99, 6, 4, 2].map(function (itm, idx) {\n    return __jsx(React.Fragment, null, __jsx(PostCard, {\n      key: idx,\n      showCommentIdx: function showCommentIdx() {\n        return console.log(idx);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }\n    }));\n  }));\n};\n\n_s(Home, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["D:/PERSONAL PROJECTS/REACT/PERN/next_frontend/pages/index.js"],"names":["React","useEffect","client","PostCard","fetch_posts_query","Home","fetchPosts","query","fetchPolicy","variables","input","resp","console","log","map","itm","idx"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,iBAAT,QAAkC,eAAlC;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA;;AAEjBJ,EAAAA,SAAS,CAAC,YAAM;AACdK,IAAAA,UAAU;AAEV,WAAO;AAAA,aAAMA,UAAU,EAAhB;AAAA,KAAP;AACD,GAJQ,EAIN,EAJM,CAAT;;AAMA,MAAMA,UAAU;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGIJ,MAAM,CAACK,KAAP,CAAa;AAC9BA,gBAAAA,KAAK,EAAEH,iBADuB;AACJI,gBAAAA,WAAW,EAAE,UADT;AACqBC,gBAAAA,SAAS,EAAE;AAC5DC,kBAAAA,KAAK,EAAE;AADqD;AADhC,eAAb,CAHJ;;AAAA;AAGTC,cAAAA,IAHS;AAQfC,cAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AARe;AAAA;;AAAA;AAAA;AAAA;AASCC,cAAAA,OAAO,CAACC,GAAR;;AATD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAVP,UAAU;AAAA;AAAA;AAAA,KAAhB;;AAaA,SACE,4BAEI,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,EAAzB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,CAAnC,EAAsCQ,GAAtC,CAA0C,UAACC,GAAD,EAAMC,GAAN;AAAA,WACxC,4BACE,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,GAAf;AAAoB,MAAA,cAAc,EAAE;AAAA,eAAMJ,OAAO,CAACC,GAAR,CAAYG,GAAZ,CAAN;AAAA,OAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADwC;AAAA,GAA1C,CAFJ,CADF;AAWD,CAhCD;;GAAMX,I;;KAAAA,I;AAkCN,eAAeA,IAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { client } from '../apolloGqlClient';\nimport PostCard from '../Components/PostCard';\nimport { fetch_posts_query } from '../gqlQueries';\n\nconst Home = () => {\n\n  useEffect(() => {\n    fetchPosts()\n\n    return () => fetchPosts()\n  }, [])\n\n  const fetchPosts = async () => {\n\n    try {\n      const resp = await client.query({\n        query: fetch_posts_query, fetchPolicy: 'no-cache', variables: {\n          input: null\n        }\n      })\n      console.log(resp)\n    } catch (error) { console.log(error) }\n\n  }\n\n  return (\n    <>\n      {\n        [1, 2, 3, 4, 5, 6, 7, 7, 99, 6, 4, 2].map((itm, idx) => (\n          <>\n            <PostCard key={idx} showCommentIdx={() => console.log(idx)} />\n          </>\n        ))\n      }\n    </>\n  );\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}