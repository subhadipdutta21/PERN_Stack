{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\PERSONAL PROJECTS\\\\REACT\\\\PERN\\\\next_frontend\\\\pages\\\\index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { message } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { client } from '../apolloGqlClient';\nimport PostCard from '../Components/PostCard';\nimport { fetch_posts_query } from '../gqlQueries';\n\nvar Home = function Home() {\n  _s();\n\n  var _useState = useState([]),\n      posts = _useState[0],\n      setPosts = _useState[1];\n\n  useEffect(function () {\n    fetchPosts(); // return () => fetchPosts()\n  }, []);\n\n  var fetchPosts = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _resp$data, _resp$data2, resp;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return client.query({\n                query: fetch_posts_query,\n                fetchPolicy: 'no-cache',\n                variables: {\n                  input: null\n                }\n              });\n\n            case 3:\n              resp = _context.sent;\n              console.log(resp);\n              (resp === null || resp === void 0 ? void 0 : (_resp$data = resp.data) === null || _resp$data === void 0 ? void 0 : _resp$data.fetchPosts) ? setPosts(resp === null || resp === void 0 ? void 0 : (_resp$data2 = resp.data) === null || _resp$data2 === void 0 ? void 0 : _resp$data2.fetchPosts) : message.error('something went wrong!');\n              _context.next = 12;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n              message.error('Could not fetch posts');\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 8]]);\n    }));\n\n    return function fetchPosts() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(React.Fragment, null, posts.map(function (itm, idx) {\n    return __jsx(React.Fragment, null, __jsx(PostCard, {\n      key: idx,\n      showCommentIdx: function showCommentIdx() {\n        return console.log(idx);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }\n    }));\n  }));\n};\n\n_s(Home, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["D:/PERSONAL PROJECTS/REACT/PERN/next_frontend/pages/index.js"],"names":["message","React","useEffect","useState","client","PostCard","fetch_posts_query","Home","posts","setPosts","fetchPosts","query","fetchPolicy","variables","input","resp","console","log","data","error","map","itm","idx"],"mappings":";;;;;;;;AAAA,SAASA,OAAT,QAAwB,MAAxB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,iBAAT,QAAkC,eAAlC;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA;;AAAA,kBAESJ,QAAQ,CAAC,EAAD,CAFjB;AAAA,MAEVK,KAFU;AAAA,MAEHC,QAFG;;AAIjBP,EAAAA,SAAS,CAAC,YAAM;AACdQ,IAAAA,UAAU,GADI,CAGd;AACD,GAJQ,EAIN,EAJM,CAAT;;AAMA,MAAMA,UAAU;AAAA,wEAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGIN,MAAM,CAACO,KAAP,CAAa;AAC9BA,gBAAAA,KAAK,EAAEL,iBADuB;AACJM,gBAAAA,WAAW,EAAE,UADT;AACqBC,gBAAAA,SAAS,EAAE;AAC5DC,kBAAAA,KAAK,EAAE;AADqD;AADhC,eAAb,CAHJ;;AAAA;AAGTC,cAAAA,IAHS;AAQfC,cAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,eAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,0BAAAA,IAAI,CAAEG,IAAN,0DAAYR,UAAZ,IAAyBD,QAAQ,CAACM,IAAD,aAACA,IAAD,sCAACA,IAAI,CAAEG,IAAP,gDAAC,YAAYR,UAAb,CAAjC,GAA4DV,OAAO,CAACmB,KAAR,CAAc,uBAAd,CAA5D;AATe;AAAA;;AAAA;AAAA;AAAA;AAWCH,cAAAA,OAAO,CAACC,GAAR;AAAoBjB,cAAAA,OAAO,CAACmB,KAAR,CAAc,uBAAd;;AAXrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAVT,UAAU;AAAA;AAAA;AAAA,KAAhB;;AAeA,SACE,4BAEIF,KAAK,CAACY,GAAN,CAAU,UAACC,GAAD,EAAMC,GAAN;AAAA,WACR,4BACE,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,GAAf;AAAoB,MAAA,cAAc,EAAE;AAAA,eAAMN,OAAO,CAACC,GAAR,CAAYK,GAAZ,CAAN;AAAA,OAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADQ;AAAA,GAAV,CAFJ,CADF;AAWD,CApCD;;GAAMf,I;;KAAAA,I;AAsCN,eAAeA,IAAf","sourcesContent":["import { message } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { client } from '../apolloGqlClient';\nimport PostCard from '../Components/PostCard';\nimport { fetch_posts_query } from '../gqlQueries';\n\nconst Home = () => {\n\n  const [posts, setPosts] = useState([])\n\n  useEffect(() => {\n    fetchPosts()\n\n    // return () => fetchPosts()\n  }, [])\n\n  const fetchPosts = async () => {\n\n    try {\n      const resp = await client.query({\n        query: fetch_posts_query, fetchPolicy: 'no-cache', variables: {\n          input: null\n        }\n      })\n      console.log(resp)\n      resp?.data?.fetchPosts ? setPosts(resp?.data?.fetchPosts) : message.error('something went wrong!')\n\n    } catch (error) { console.log(error); message.error('Could not fetch posts') }\n\n  }\n\n  return (\n    <>\n      {\n        posts.map((itm, idx) => (\n          <>\n            <PostCard key={idx} showCommentIdx={() => console.log(idx)} />\n          </>\n        ))\n      }\n    </>\n  );\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}