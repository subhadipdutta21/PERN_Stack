{"ast":null,"code":"var _jsxFileName = \"D:\\\\PERSONAL PROJECTS\\\\REACT\\\\PERN\\\\next_frontend\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport { message } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { client } from '../apolloGqlClient';\nimport PostCard from '../Components/PostCard';\nimport { fetch_posts_query } from '../gqlQueries';\n\nconst Home = ({\n  posts\n}) => {\n  // const [posts, setPosts] = useState([])\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  return posts.map((itm, idx) => __jsx(PostCard, {\n    key: itm.id,\n    content: itm.body,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 29\n    }\n  }));\n};\n\nexport async function getStaticProps() {\n  var _resp, _resp$data3;\n\n  console.log('clled server side');\n\n  try {\n    var _resp$data, _resp$data2;\n\n    const resp = await client.query({\n      query: fetch_posts_query,\n      fetchPolicy: 'no-cache',\n      variables: {\n        input: null\n      }\n    });\n    console.log(resp);\n    (resp === null || resp === void 0 ? void 0 : (_resp$data = resp.data) === null || _resp$data === void 0 ? void 0 : _resp$data.fetchPosts) ? setPosts(resp === null || resp === void 0 ? void 0 : (_resp$data2 = resp.data) === null || _resp$data2 === void 0 ? void 0 : _resp$data2.fetchPosts) : message.error('something went wrong!');\n  } catch (error) {\n    console.log(error);\n    message.error('Could not fetch posts');\n  }\n\n  return {\n    props: {\n      posts: (_resp = resp) === null || _resp === void 0 ? void 0 : (_resp$data3 = _resp.data) === null || _resp$data3 === void 0 ? void 0 : _resp$data3.fetchPosts\n    }\n  };\n}\nexport default Home;","map":{"version":3,"sources":["D:/PERSONAL PROJECTS/REACT/PERN/next_frontend/pages/index.js"],"names":["message","React","useEffect","useState","client","PostCard","fetch_posts_query","Home","posts","loading","setLoading","map","itm","idx","id","body","getStaticProps","console","log","resp","query","fetchPolicy","variables","input","data","fetchPosts","setPosts","error","props"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,MAAxB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,iBAAT,QAAkC,eAAlC;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAa;AAExB;AACA,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBP,QAAQ,CAAC,IAAD,CAAtC;AAEA,SACEK,KAAK,CAACG,GAAN,CAAU,CAACC,GAAD,EAAMC,GAAN,KAAc,MAAC,QAAD;AAAU,IAAA,GAAG,EAAED,GAAG,CAACE,EAAnB;AAAuB,IAAA,OAAO,EAAEF,GAAG,CAACG,IAApC;AAA0C,IAAA,OAAO,EAAEN,OAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAxB,CADF;AAGD,CARD;;AAUA,OAAO,eAAeO,cAAf,GAAgC;AAAA;;AAErCC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;;AAEA,MAAI;AAAA;;AACF,UAAMC,IAAI,GAAG,MAAMf,MAAM,CAACgB,KAAP,CAAa;AAC9BA,MAAAA,KAAK,EAAEd,iBADuB;AACJe,MAAAA,WAAW,EAAE,UADT;AACqBC,MAAAA,SAAS,EAAE;AAC5DC,QAAAA,KAAK,EAAE;AADqD;AADhC,KAAb,CAAnB;AAKAN,IAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AACA,KAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,0BAAAA,IAAI,CAAEK,IAAN,0DAAYC,UAAZ,IAAyBC,QAAQ,CAACP,IAAD,aAACA,IAAD,sCAACA,IAAI,CAAEK,IAAP,gDAAC,YAAYC,UAAb,CAAjC,GAA4DzB,OAAO,CAAC2B,KAAR,CAAc,uBAAd,CAA5D;AAED,GATD,CASE,OAAOA,KAAP,EAAc;AAAEV,IAAAA,OAAO,CAACC,GAAR,CAAYS,KAAZ;AAAoB3B,IAAAA,OAAO,CAAC2B,KAAR,CAAc,uBAAd;AAAwC;;AAE9E,SAAO;AACLC,IAAAA,KAAK,EAAE;AACLpB,MAAAA,KAAK,WAAEW,IAAF,yDAAE,MAAMK,IAAR,gDAAE,YAAYC;AADd;AADF,GAAP;AAKD;AAED,eAAelB,IAAf","sourcesContent":["import { message } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { client } from '../apolloGqlClient';\nimport PostCard from '../Components/PostCard';\nimport { fetch_posts_query } from '../gqlQueries';\n\nconst Home = ({posts}) => {\n\n  // const [posts, setPosts] = useState([])\n  const [loading, setLoading] = useState(true)\n\n  return (\n    posts.map((itm, idx) => <PostCard key={itm.id} content={itm.body} loading={loading} />)\n  );\n}\n\nexport async function getStaticProps() {\n\n  console.log('clled server side')\n\n  try {\n    const resp = await client.query({\n      query: fetch_posts_query, fetchPolicy: 'no-cache', variables: {\n        input: null\n      }\n    })\n    console.log(resp)\n    resp?.data?.fetchPosts ? setPosts(resp?.data?.fetchPosts) : message.error('something went wrong!')\n\n  } catch (error) { console.log(error); message.error('Could not fetch posts') }\n\n  return {\n    props: {\n      posts: resp?.data?.fetchPosts\n    },\n  }\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}